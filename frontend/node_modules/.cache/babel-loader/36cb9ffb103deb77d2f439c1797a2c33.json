{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSuccess } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    });\n    const _response$data = response.data,\n          token = _response$data.token,\n          user = _response$data.user;\n    yield put(signInSuccess(token, user));\n    history.push('/register');\n  } catch (error) {\n    console.tron.log('Error');\n  }\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/home/ncls/√Årea de Trabalho/FredBlog/fredreact/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","history","api","signInSuccess","signIn","payload","email","password","response","post","data","token","user","push","error","console","tron","log"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AAAA,UACMC,KADN,GAC0BD,OAD1B,CACMC,KADN;AAAA,UACaC,QADb,GAC0BF,OAD1B,CACaE,QADb;AAGF,UAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACI,GAAG,CAACO,IAAL,EAAW,UAAX,EAAuB;AAChDH,MAAAA,KADgD;AAEhDC,MAAAA;AAFgD,KAAvB,CAA3B;AAHE,2BAQsBC,QAAQ,CAACE,IAR/B;AAAA,UAQMC,KARN,kBAQMA,KARN;AAAA,UAQaC,IARb,kBAQaA,IARb;AAUF,UAAMb,GAAG,CAACI,aAAa,CAACQ,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAX,IAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACD,GAbD,CAaE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,OAAjB;AACD;AACF;AAED,eAAejB,GAAG,CAAC,CAACH,UAAU,CAAC,uBAAD,EAA0BO,MAA1B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport history from '~/services/history';\nimport api from '~/services/api';\n\nimport { signInSuccess } from './actions';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    yield put(signInSuccess(token, user));\n\n    history.push('/register');\n  } catch (error) {\n    console.tron.log('Error');\n  }\n}\n\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);\n"]},"metadata":{},"sourceType":"module"}